def main():
	def Connect_To_PLB(): #Function to establish socket connection with PLB
		Connected = False
		counter=0
		while not Connected and (counter<5):
			Connected=socket_open("192.168.0.5",6008,"Sick_Socket")
			counter=counter+1
		end
		if counter>=5:
			popup("Connection to PLB failed","Time out",False,True,blocking=True)
			halt
		else:
			textmsg("Connected to PLB")
		end
	end	
	
	def SendString(string): #Function to send a string over the socket. INPUT: string to send
		sent=False
		sent=socket_send_string(string, "Sick_Socket")
		sleep(0.1) 
		if not sent:
			popup("Failed to send string message","Message Transmission Failure",False,True,blocking=True) 
		end
	end
	
	def getMsg(expectedNumbers): #Function to get ascii float number responses. INPUT= Int number of expected floats. OUTPUT= list (length expectedNumbers+1) with expected numbers
		receivedNumbers=0
		
		while receivedNumbers==0:
			receivedMsg=socket_read_ascii_float(expectedNumbers,"Sick_Socket")
			receivedNumbers=receivedMsg[0]
		end
		return receivedMsg
	end

	def ReceiveCommand(type): #Function to receive the different types of response messages from PLB. INPUT= Int type number. OUTPUT= list (length depends on type) with received response
		if type==1:    #StateMsg
			receivedStateMsg=getMsg(3)
			return receivedStateMsg
		end
		if type==2:    #TriggerMsg
			receivedTrigMsg=getMsg(3)
			return receivedTrigMsg
		end
		if type==3: #PartMsg
			receivedPartMsg=getMsg(22)
			return receivedPartMsg
		end
		if type==4: #BinMsg
			receivedBinMsg=getMsg(12)
			return receivedBinMsg
		end
		if type==5:    #AlignmentPointMsg
			receivedAlignPtMsg=getMsg(3)
			return receivedAlignPtMsg
		end
		if type==6: #VerifAlignmentMsg
			receivedVerifAlignMsg=getMsg(7)
			return receivedVerifAlignMsg
		end
		if type==7:    #SaveAlignmentMsg
			receivedSaveAlignMsg=getMsg(2)
			return receivedSaveAlignMsg
		end
	end
	
	def SetState(nState,sJobAlias): #Function to change the state of PLB. INPUT= int nState the desired state number, string sJobAlias the PLB job alias	
		SendString("SetState,")
		if nState==1:
			SendString("1,")
		elif nState==3:
			SendString("3,")
		else:
			popup("Unrecognized state")
			end
			SendString(sJobAlias)
			SendString(";")
			receivedStateMsg=ReceiveCommand(1)
		if receivedStateMsg[1]!=1:
			popup("Expected 	state message,Received Wrong type")
		end
		if receivedStateMsg[2]!=0:
			errorHandler(receivedStateMsg[2])
			halt
		end  
	end

	def Trigger(imageId): #Function to trigger an image with the camera. INPUT= int image ID number
		SendString("Trigger,")
		socket_set_var("imageId",imageId,"Sick_Socket")
		SendString(";")

		receivedTrigMsg=ReceiveCommand(2)
		if receivedTrigMsg[1]!=2:
			popup("Expected Trig message,Received Wrong type")
		end
		if receivedTrigMsg[2]!=0:
			errorHandler(receivedTrigMsg[2])
			halt
		end
	end 
	
	def LocatePart(jobAlias): #Function to ask PLB to locate a part. INPUT= string PLB job Alias. OUTPUT=list with received part result data
		SendString("LocatePart,")
		SendString(jobAlias)
		SendString(";")
		receivedPartMsg=ReceiveCommand(3)
		if receivedPartMsg[1]!=3:
			popup("Expected Part message,Received Wrong type")     
		end
		
		if receivedPartMsg[2]==111 or receivedPartMsg[2]==112 or receivedPartMsg[2]==113 or receivedPartMsg[2]==114:
			receivedPartMsg=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		elif receivedPartMsg[2]!=0 and receivedPartMsg[2]!=3 and receivedPartMsg[2]!=111 and receivedPartMsg[2]!=112 and receivedPartMsg[2]!=113 and receivedPartMsg[2]!=114: #if result not OK and not a license error
			errorHandler(receivedPartMsg[1])
			halt
		end
		
		return receivedPartMsg
	end
	
	def LocateBin(jobAlias): #Function to ask PLB to locate a bin. INPUT= string PLB job Alias.
		SendString("LocateBin,")
		SendString(jobAlias)
		SendString(";")
		receivedBinMsg=ReceiveCommand(4)
		if receivedBinMsg[1]!=4:
			popup("Expected Bin message,Received Wrong type")     
		end
		if receivedBinMsg[2]!=0 and receivedBinMsg[2]!=3 :
			errorHandler(receivedBinMsg[2])
			halt
		end
	end
		
	
	def AddAlignmentPoint(positionVector): # Function to send an AddAlignmentPoint command to PLB. INPUT=position of the robot as a meter vector (list length 3)
		socket_set_var("posX",positionVector[0]*1000,"Sick_Socket")
		SendString(",")
		socket_set_var("posY",positionVector[1]*1000,"Sick_Socket")
		SendString(",")
		socket_set_var("posZ",positionVector[2]*1000,"Sick_Socket")
		SendString(";")
		receivedAlignPtMsg=ReceiveCommand(5)
		if receivedAlignPtMsg[1]!=5:
			popup("Expected alignment point message,Received Wrong type")
		end
		if receivedAlignPtMsg[2]!=0:
			errorHandler(receivedAlignPtMsg[2])
			halt
		end
	end 
	
	def VerifyAlignment(positionVector): # Function to send an VerifyAlignment command to PLB. INPUT=position of the robot as a meter vector (list length 3)
		socket_set_var("VerifposX",positionVector[0]*1000,"Sick_Socket") 
		SendString(",")
		socket_set_var("VerifposY",positionVector[1]*1000,"Sick_Socket")    
		SendString(",")
		socket_set_var("VerifposZ",positionVector[2]*1000,"Sick_Socket")    
		SendString(";")
		receivedVerifAlignMsg=ReceiveCommand(6)
		if receivedVerifAlignMsg[1]!=6:
			popup("Expected VerifyAlignment message,Received Wrong type")
		end
		if receivedVerifAlignMsg[2]!=0: 
			errorHandler(receivedVerifAlignMsg[2])
		end
	end
	
	def SaveAlignment(): # Function to send a SaveAlignment command to PLB.
		SendString("SaveAlignment;")
		receivedSaveAlignMsg=ReceiveCommand(7)
		if receivedSaveAlignMsg[1]!=7:
			popup("Expected SaveAlignment message,Received Wrong type")
		end
		if receivedSaveAlignMsg[2]!=0:
			errorHandler(receivedSaveAlignMsg[2])
			halt
		end
	end
	
	def extractPosVect(): #Function to extract the position vector of the present TCP position
		pose=get_actual_tcp_pose()
		vec=[0,0,0]
		vec[0]=pose[0]
		vec[1]=pose[1]
		vec[2]=pose[2]
		return vec
	end
	
	def PerformAlignment():  # Function to perform a PLB HEA procedure (adapt robot positions to your environment!)
		SetState(3,"Nut")
		movel(p[-0.500,-0.500,0.500,0.9689,2.4456,-2.591], a=1.2, v=0.25, r=0)
		Trigger(1) #First Image
		vec1=[-0.500,-0.500,0.500] #store position vector
		AddAlignmentPoint(vec1) #Add alignment point to PLBs HEA procedure
		popup("Alignment Position 1|1","Title",False,False,blocking=True)

		movel(p[-0.500,-0.190,0.500,0.9689,2.4456,-2.591], a=1.2, v=0.25, r=0)
		Trigger(2)
		vec2=[-0.500,-0.190,0.500]
		AddAlignmentPoint(vec2)
		popup("Alignment Position 2|1","Title",False,False,blocking=True)

		movel(p[-0.180,-0.500,0.500,0.9689,2.4456,-2.591], a=1.2, v=0.25, r=0)
		Trigger(3)   
		vec3=[-0.180,-0.500,0.500]
		AddAlignmentPoint(vec3)
		popup("Alignment Position 3|1","Title",False,False,blocking=True)

		movel(p[-0.500,-0.500,0.6500,0.9689,2.4456,-2.591], a=1.2, v=0.25, r=0)
		Trigger(4)   
		vec4=[-0.500,-0.500,0.650]
		AddAlignmentPoint(vec4)
		popup("Alignment Position 1|2","Title",False,False,blocking=True)

		movel(p[-0.500,-0.190,0.650,0.9689,2.4456,-2.591], a=1.2, v=0.25, r=0)
		Trigger(5) 
		vec5=[-0.500,-0.190,0.650]
		AddAlignmentPoint(vec5)
		popup("Alignment Position 2|2","Title",False,False,blocking=True)

		movel(p[-0.180,-0.500,0.650,0.9689,2.4456,-2.591], a=1.2, v=0.25, r=0)
		Trigger(6)   
		vec6=[-0.180,-0.500,0.650]
		AddAlignmentPoint(vec6)
		popup("Alignment Position 3|2","Title",False,False,blocking=True)

		movel(p[-0.500,-0.500,0.800,0.9689,2.4456,-2.591], a=1.2, v=0.25, r=0)
		Trigger(7)   
		vec7=[-0.500,-0.500,0.800]
		AddAlignmentPoint(vec7)
		popup("Alignment Position 1|3","Title",False,False,blocking=True)

		movel(p[-0.500,-0.190,0.800,0.9689,2.4456,-2.591], a=1.2, v=0.25, r=0)
		Trigger(8)   
		vec8=[-0.500,-0.190,0.800]
		AddAlignmentPoint(vec8)
		popup("Alignment Position 2|3","Title",False,False,blocking=True)

		movel(p[-0.180,-0.500,0.800,0.9689,2.4456,-2.591], a=1.2, v=0.25, r=0)
		Trigger(9)   
		vec9=[-0.180,-0.500,0.800]
		AddAlignmentPoint(vec9)
		popup("Alignment Position 3|3","Title",False,False,blocking=True)
	
		SaveAlignment() 
	
	# Verify Alignment with 2 points
		SetState(1, "Nut")
		movel(p[0.13, 0.565, 0.265, 4.7028, 0.3435, -0.2538], a=1.2, v=0.25, r=0.025)
		Trigger(1)	
		Verifvec1 = [0.13, 0.565, 0.265]
		VerifyAlignment(Verifvec1) 
	
		movel(p[0.080, 0.525, 0.300, 4.6929, -0.2487, 0.2412], a=1.2, v=0.25, r=0.025)
		Trigger(2)	
		Verifvec2 = [0.415, 0.582, 0.220]
		VerifyAlignment(Verifvec2) 
	end
	
	def extractFromList(list,startingIndex,Length): #Function extracting a subset list out of a list. INPUT=list to make the extraction from, int starting extraction index,int length of extraction. OUTPUT= Extracted list
		counter=0
		if Length==6:
			extractedList=[-1,-1,-1,-1,-1,-1]
		elif Length==3:
			extractedList=[-1,-1,-1]
		end
		while counter<Length:
			extractedList[counter]=list[startingIndex]
			counter=counter+1
			startingIndex=startingIndex+1
		end
		return extractedList
	end
		
	def convertPose(PoseFromPLB): #Function to convert the frames from a list with millimiters, and RPY angles in degrees data (as returned by PLB) to a pose variable (meters, radians, axis angle notation) as used by the UR robot. INPUT=list (length 6) with frame format from PLB (mm, RPY angles in degrees). OUTPUT=UR robot pose.
		rotRPY=[0,0,0]
		rotRPY[0]=d2r(PoseFromPLB[3])  #Rx
		rotRPY[1]=d2r(PoseFromPLB[4])  #Ry
		rotRPY[2]=d2r(PoseFromPLB[5])  #Rz
		rotVec=rpy2rotvec(rotRPY)
		convertedPose=p[PoseFromPLB[0]/1000,PoseFromPLB[1]/1000,PoseFromPLB[2]/1000,rotVec[0],rotVec[1],rotVec[2]]
		return convertedPose
	end

	def calculateFinalPose(partFrame,relativeToolFrame,verticalCorrection): #Function first converting the frames from list to pose variable then pose multiplying them to obtain the final robot pose. INPUT: 3 lists (length 6) containing PF, RF and VC data. OUTPUT= final pose
		partFramePose=convertPose(partFrame)
		relativeToolFramePose=convertPose(relativeToolFrame)
		verticalCorrectionPose=convertPose(verticalCorrection)
		
		finalPose=pose_trans(verticalCorrectionPose,partFramePose)
	
		finalPose=pose_trans(finalPose,relativeToolFramePose)
		return finalPose
	end

	def extractPose(partData):  #Function extracting a meaningful pose from the part result data obtained from PLB. INPUT= list PartResult from PLB (length 22). OUTPUT=final pose.
		partFrame=extractFromList(partData,4,6)
		relativeToolFrame=extractFromList(partData,10,6)
		verticalCorrection=extractFromList(partData,16,6)
		finalPose=calculateFinalPose(partFrame,relativeToolFrame,verticalCorrection)
		return finalPose
	end
	
	def errorHandler(errorNumber): #Function returning a popup error message according to the error number from PLB. INPUT=int the PLB error number.
		if errorNumber==-1:
			popup("PLB error -1:Unexpected Error")
		elif errorNumber==1:
			popup("PLB error 1:Robot communication error")
		elif errorNumber==2:
			popup("PLB error 2:Sensor Error")
		elif errorNumber==3:
			popup("PLB error 3:License Error")
		elif errorNumber==21:
			popup("PLB error 21:Unknown Job")
		elif errorNumber==22:
			popup("PLB error 22:Invalid Job")
		elif errorNumber==31:
			popup("PLB error 31:Set state failed")
		elif errorNumber==32:
			popup("PLB error 32:PLB Busy")
		elif errorNumber==41:
			popup("PLB error 41:Trigger error")
		elif errorNumber==42:
			popup("PLB error 42:Invalid State for Triggering")
		elif errorNumber==43:
			popup("PLB error 43:Overtriggered")
		elif errorNumber==44:
			popup("PLB error 44:Acquisition Failed")
		elif errorNumber==101:
			popup("PLB error 101:No image")
		elif errorNumber==102:
			popup("PLB error 102:Invalid State")
		elif errorNumber==103:
			popup("PLB error 103:PLB Busy")
		elif errorNumber==111:
			popup("PLB error 111:No part located")
		elif errorNumber==112:
			popup("PLB error 112:Part Overlapped")
		elif errorNumber==113:
			popup("PLB error 113:Gripper collision")
		elif errorNumber==114:
			popup("PLB error 114:Bin empty")
		elif errorNumber==121:
			popup("PLB error 121:Bin not found")
		elif errorNumber==131:
			popup("PLB error 131:Alignment target not found")
		elif errorNumber==132:
			popup("PLB error 132: Failed to add Alignment point")
		elif errorNumber==133:
			popup("PLB error 133: Too few points in Alignment")
		elif errorNumber==134:
			popup("PLB error 134:Alignment calculation failed")
		elif errorNumber==135:
			popup("PLB error 135:Alignment deviation Threshold exceeded")
		elif errorNumber==136:
			popup("PLB error 136:Too much scaling")	 
		elif errorNumber==137:
			popup("PLB error 137:Invalid Z axis direction")
		end	  
	end

	def errorHandler(errorNumber): #Function returning a popup error message according to the error number from PLB. INPUT=int the PLB error number.
		if errorNumber==-1:
			popup("PLB error -1:Unexpected Error")
		elif errorNumber==1:
			popup("PLB error 1:Robot communication error")
		elif errorNumber==2:
			popup("PLB error 2:Sensor Error")
		elif errorNumber==3:
			popup("PLB error 3:License Error")
		elif errorNumber==21:
			popup("PLB error 21:Unknown Job")
		elif errorNumber==22:
			popup("PLB error 22:Invalid Job")
		elif errorNumber==31:
			popup("PLB error 31:Set state failed")
		elif errorNumber==32:
			popup("PLB error 32:PLB Busy")
		elif errorNumber==41:
			popup("PLB error 41:Trigger error")
		elif errorNumber==42:
			popup("PLB error 42:Invalid State for Triggering")
		elif errorNumber==43:
			popup("PLB error 43:Overtriggered")
		elif errorNumber==44:
			popup("PLB error 44:Acquisition Failed")
		elif errorNumber==101:
			popup("PLB error 101:No image")
		elif errorNumber==102:
			popup("PLB error 102:Invalid State")
		elif errorNumber==103:
			popup("PLB error 103:PLB Busy")
		elif errorNumber==111:
			popup("PLB error 111:No part located")
		elif errorNumber==112:
			popup("PLB error 112:Part Overlapped")
		elif errorNumber==113:
			popup("PLB error 113:Gripper collision")
		elif errorNumber==114:
			popup("PLB error 114:Bin empty")
		elif errorNumber==121:
			popup("PLB error 121:Bin not found")
		elif errorNumber==131:
			popup("PLB error 131:Alignment target not found")
		elif errorNumber==132:
			popup("PLB error 132: Failed to add Alignment point")
		elif errorNumber==133:
			popup("PLB error 133: Too few points in Alignment")
		elif errorNumber==134:
			popup("PLB error 134:Alignment calculation failed")
		elif errorNumber==135:
			popup("PLB error 135:Alignment deviation Threshold exceeded")
		elif errorNumber==136:
			popup("PLB error 136:Too much scaling")	 
		elif errorNumber==137:
			popup("PLB error 137:Invalid Z axis direction")
		end
	end

	def pickConrod(Data)
		pos=extractPose(Data)
		pickPose=extractPickPoseAlias(Data)
	def pickConrod():
		movep(pose_trans(pos,p[0,0,-0.100,0,0,0])) #PRE-PICK POS AT A POSITION 100mm IN NEGATIVE TOOL Z DIRECTION FROM PICK POSITION
		#Default Home position = {movel(p[-.0888, -.2550, .9775, 1.026, 2.5916, -2.3545], a=1.2, v=0.25, r=0)}
		##Open gripper
		rq_open_and_wait()
		movep(pos)
		##Close gripper
		rq_close_and_wait()
		movep(pose_trans(pos,p[0,0,-0.100,0,0,0]))
		#movel(p[],a=1.2,v=0.25, r=0) home position
		if pickPose=="Handle":
			movel(p[0.27476,-0.25024,592.88,1.2091,-2.9005,-0.0059],a=1.2,v=0.25,r=0)
		elif pickPose=="Head":
			movel(p[0.29273,-0.279.83,0.59281,1.2091,-2.9006,-0.0064],a=1.2,v=0.25,r=0)
		elif pickPose=="Tail":
			movel(p[0.27476,-0.25024,592.88,1.2091,-2.9005,-0.0059],a=1.2,v=0.25,r=0)
		end
		#move to place in box 1
		rq_open_and_wait()
		#move to home position
	end
	
	def pickNut(Data)
		pos=extractPose(Data)
		#Begin to scan and place part into box
		popup("Ready to begin Part scanning and sorting","Note",False,False,blocking=True)
		#ready to scan
		movel(p[-.3537, -.3261, .5554, 1.1882,-2.8890, -0.0134], a=1.2, v=0.25, r=0)
		#Lets begin and move for box 1 "conrod"
		popup("Moving to Box 1","Note",False,False,blocking=True)
		#middle_pos / approach_point
		movel(p[.1840, -.2136, .5705, 1.1752, -2.918, -0.009], a=1.2, v=0.25, r=0)
		#scanning
		movel(p[.2944, -.2832, .5928, 1.209, -2.900, -0.006], a=1.2, v=0.25, r=0)
		#Towards or exit box 1
		movel(p[.4278, -.1992, .5544, 2.872, -1.254, -0.035], a=1.2, v=0.25, r=0)
		#lower_into_box 1
		movel(p[.4278, -.1991, .5226, 2.872, -1.254, -0.035], a=1.2, v=0.25, r=0)
		##Open gripper of UR5
		popup("Gripper opens","Note",False,False,blocking=True)
		rq_open_and_wait()
		#Towards or exit box 1
		movel(p[.4278, -.1992, .5544, 2.872, -1.254, -0.035], a=1.2, v=0.25, r=0)
		#middle_pos / approach_point
		movel(p[.1840, -.2136, .5705, 1.1752, -2.918, -0.009], a=1.2, v=0.25, r=0)
		#Pick and Place Conrod done
		popup("Part scan and sorting complete","Note",False,False,blocking=True)
	end
	
	def pickNut():
		movep(pose_trans(pos,p[0,0,-0.100,0,0,0])) #PRE-PICK POS AT A POSITION 100mm IN NEGATIVE TOOL Z DIRECTION FROM PICK POSITION
		#Default Home position = {movel(p[-.0888, -.2550, .9775, 1.026, 2.5916, -2.3545], a=1.2, v=0.25, r=0)}
		##Open gripper
		rq_open_and_wait()
		movep(pos)
		##Close gripper
		rq_close_and_wait()
		movep(pose_trans(pos,p[0,0,-0.100,0,0,0]))
		#movep(p[],a=1.2,v=0.25, r=0) mid position
		#move to scan
		#rotate object by 60 degrees
		#place in box 2
	end
	
	def pickTopFrame(Data):
		pos=extractPose(Data)
		pickPose=extractPickPoseAlias(Data)
		#Begin to scan and place part into box
		popup("Ready to begin Part scanning and sorting","Note",False,False,blocking=True)
		#ready to scan
		movel(p[-.3537, -.3261, .5554, 1.195,-2.8860, -0.0134], a=1.2, v=0.25, r=0)
		#Lets begin and move for box 2 "nut"
		popup("Moving to Box 2","Note",False,False,blocking=True)
		#middle_pos / approach_point
		movel(p[.1840, -.2136, .5705, 1.1752, -2.918, -0.009], a=1.2, v=0.25, r=0)
		#scanning
		movel(p[.2960, -.2580, .5905, .368, -3.109, -0.0435], a=1.2, v=0.25, r=0)
		#scanning2
		movel(p[.2960, -.2580, .5905, 2.003, -2.426, -0.0456], a=1.2, v=0.25, r=0)
		#Towards or exit box 2
		movel(p[.1294, -.4814, .5456, 1.159, -2.915, 0.0330], a=1.2, v=0.25, r=0)
		#lower_into_box 2
		movel(p[.1294, -.4813, .5301, 1.159, -2.915, 0.033], a=1.2, v=0.25, r=0)
		##Open gripper of UR5
		popup("Gripper opens","Note",False,False,blocking=True)
		rq_open_and_wait()
		#Towards or exit box 2
		movel(p[.1294, -.4814, .5456, 1.159, -2.915, 0.0330], a=1.2, v=0.25, r=0)
		#middle_pos / approach_point
		movel(p[.1840, -.2136, .5705, 1.1752, -2.918, -0.009], a=1.2, v=0.25, r=0)
		#Pick and Place Nut done
		popup("Part scan and sorting complete","Note",False,False,blocking=True)
	end
	
	def pickTopframe():
		movep(pose_trans(pos,p[0,0,-0.100,0,0,0])) #PRE-PICK POS AT A POSITION 100mm IN NEGATIVE TOOL Z DIRECTION FROM PICK POSITION
		#Default Home position = {movel(p[-.0888, -.2550, .9775, 1.026, 2.5916, -2.3545], a=1.2, v=0.25, r=0)}
		##Open gripper
		rq_open_and_wait()
		movep(pos)
		##Close gripper
		rq_close_and_wait()
		movep(pose_trans(pos,p[0,0,-0.100,0,0,0]))
		#movep(p[],a=1.2,v=0.25, r=0) mid position
		if pickPose=="Mid":
			#move to scan
		elif pickPose=="Left":
			#move to scan
		elif pickPose=="Right":
			#move to scan
		elif pickPose=="Front":
			#move to scan
		end
		#move to place in box 3
		#Begin to scan and place part into box
		popup("Ready to begin Part scanning and sorting","Note",False,False,blocking=True)
		#ready to scan
		movel(p[-.3537, -.3261, .55549, 1.188,-2.8890, -0.0134], a=1.2, v=0.25, r=0)
		#Lets begin and move for box 3 "top_frame"
		popup("Moving to Box 3","Note",False,False,blocking=True)
		#middle_pos / approach_point
		movel(p[-.033, -.2006, .49368, 1.2414, -2.8728, -0.0105], a=1.2, v=0.25, r=0)
		#rotate to scan 
		movel(p[.2525, -.2618, .63465, 1.175, -0.706, 1.7678], a=1.2, v=0.25, r=0)
		#scanning
		movel(p[.3207, -.2884, .6296, 1.7570, -.7070, 1.7679], a=1.2, v=0.25, r=0)
		#Towards or exit box 3
		movel(p[.2373, -.3509, .5556, 2.870, -1.2405, -0.08], a=1.2, v=0.25, r=0)
		#lower_into_box 3
		movel(p[.2373, -.3513, .5255, 2.870, -1.2404, -0.08], a=1.2, v=0.25, r=0)
		##Open gripper of UR5
		popup("Gripper opens","Note",False,False,blocking=True)
		rq_open_and_wait()
		#Towards or exit box 3
		movel(p[.2373, -.3509, .5556, 2.870, -1.2405, -0.08], a=1.2, v=0.25, r=0)
		#middle_pos / approach_point
		movel(p[-.033, -.2006, .49368, 1.2414, -2.8728, -0.0105], a=1.2, v=0.25, r=0)	
		#Pick and Place Top_frame done
		popup("Part scan and sorting complete","Note",False,False,blocking=True)
	end
	
	def zListSort(x):
		if x[0] > x[1] and x[1] > x[2] and x[0] > x[2]:
			x = [x[0], x[1], x[2]]
		elif x[0] > x[2] and x[2] > x[1] and x[0] > x[1]:
			x = [x[0], x[2], x[1]]
		elif x[1] > x[0] and x[0] > x[2] and x[1] > x[2]:
			x = [x[1], x[0], x[2]]
		elif x[1] > x[2] and x[2] > x[0] and x[1] > x[0]:
			x = [x[1], x[2], x[0]]
		elif x[2] > x[0] and x[0] > x[1] and x[2] > x[1]:
			x = [x[2], x[0], x[1]]
		elif x[2] > x[1] and x[1] > x[0] and x[2] > x[0]:
			x = [x[2], x[1], x[0]]
		end
		return x
	end
	
	def extractPickPoseAlias(partData):
		return partData[23]
	end
		
	Connect_To_PLB()
	rq_activate()
	PerformAlignment()
	SetState(1,"Nut")
	scancounter=0
	while 1:
		while scancounter<3:
			Trigger(1)
			LocateBin("Job")
			partData1=LocatePart("Nut")
			pos1=extractPose(partData1)
			partData2=LocatePart("Conrod")
			pos2=extractPose(partData2)
			partData3=LocatePart("TopFrame")
			pos3=extractPose(partData3)
			zlist=[pos1[2],pos2[2],pos3[2]]
			zlist = zListSort(zlist)
			if zlist[0]==0 and zlist[1]==0 and zlist[2]==0:
				scancounter=scancounter+1
			else:
				scancounter=0
				if zlist[0]==0:
					pass
				elif zlist[0]==pos1[2]:
					pickNut(partData1)
				elif zlist[0]==pos2[2]:
					pickConrod(partData2)
				elif zlist[0]==pos3[2]:
					pickTopFrame(partData3)
				end
					
				if zlist[1]==0:
					pass
				elif zlist[1]==pos1[2]: 
					pickNut(partData1)
				elif zlist[1]==pos2[2]:
					pickConrod(partData2)
				elif zlist[1]==pos3[2]:
					pickTopFrame(partData3)
				end
				if zlist[2]==0:
					pass
				elif zlist[2]==pos1[2]:
					pickNut(partData1)
				elif zlist[2]==pos2[2]:
					pickConrod(partData2)
				elif zlist[2]==pos3[2]:
					pickTopFrame(partData3)
				end
				
			end
		end
	end
end

main()